#include <iostream>
#include <windows.h>
#include  <conio.h>

using namespace std;

//esta funcion permite seleccionar una posicion en un plano cartesiano
void gotoxy(int x, int y){
HANDLE hcon = GetStdHandle(STD_OUTPUT_HANDLE);
 COORD dwPos;
 dwPos.X = x;
 dwPos.Y = y;
 SetConsoleCursorPosition(hcon, dwPos);
}

char mapa[27][31] = {
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
    {'|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|', ' ', '|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
    {'|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|', '-', '|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
};

struct coordenadas{
    int x, y;
};

struct pieza{

    coordenadas ori;
    coordenadas peri[4];

    char D;
    char d = '*';

    coordenadas posicion(int n);
};

coordenadas pieza::posicion(int n){
    coordenadas ret = {ori.x, ori.y};
    if(n != 0){
        ret.x += peri[n-1].x;
        ret.y += peri[n-1].y;
    }
    return ret;
}
/*
Portaaviones 5 casillas
buque 4 casillas
submarino 3 casillas
lancha 1 casilla
*/
coordenadas peris[4][4] =
{{{2,0},{4,0},{6,0},{8,0 } },
{{2,0},{4,0},{6,0},{ } },
{{2,0},{4,0},{ },{ } },
{{ },{ },{ },{ } }};

char barcos[4] = {'P','B','S','L'};

char ju [27][31];

class player{
    public:
        void pasarmapa();
        void dibujarmapaju();
        void pintar(pieza &, int);
        void borrar(pieza &);
        void rotar(pieza &);
        coordenadas rotar(coordenadas &);
        void seleccionar(pieza &, int);
        void mover(pieza &, int &);
        bool colision(pieza &);
        
};

void player::pasarmapa(){
    for(int i=0;i<27;i++){
        cout << endl;
        for(int j=0;j<31;j++){
            ju[i][j] = mapa[i][j];
        }
    }
}

void player::dibujarmapaju(){
    for(int i=0;i<27;i++){
        cout << endl;
        for(int j=0;j<31;j++){
            cout << ju[i][j];
        }
    }
}

void player::pintar (pieza &P, int r){
    if(r == 1){
        for(int i=0; i<5; i++){
            coordenadas c = P.posicion(i);
            ju[c.y-1] [c.x-1] = P.d;
            }
        }else{
            for(int i=0; i<5; i++){
                coordenadas c = P.posicion(i);
                ju[c.y-1] [c.x-1] = P.D;
            }
        }
    }           

void player::borrar (pieza &P){
    for(int i=0; i<5; i++){
        coordenadas c = P.posicion(i);
        ju[c.y-1] [c.x-1] = ' ';
    }
}

coordenadas player::rotar(coordenadas &c){
    coordenadas ret = {c.y, c.x};
    return ret;
}

void player::rotar(pieza &P){
    for(int i=0;i<4;i++){
        P.peri[i] = player::rotar(P.peri[i]);
    }
}

void player::seleccionar(pieza &P, int r){
    P.ori.x = 2;
    P.ori.y = 2;
    P.D = barcos[r];
    for(int i=0 ; i<4;i++){
        P.peri[i] = peris[r][i];
    }
}

void player::mover(pieza &P, int &r){
    if(kbhit()){
        pieza copia = P;
        char tecla = getch();
        if(tecla == 'w') P.ori.y -=2;
        if(tecla == 'a') P.ori.x -=2;
        if(tecla == 's') P.ori.y +=2;
        if(tecla == 'd') P.ori.x +=2;

        if(tecla == 'c'){
            player::rotar(P);
        }

        if(player::colision(P)){
            P = copia;
        }
        player::borrar(copia);
        player::pintar(P,1);

        if(tecla == 'x'){
            player::pintar(P,2);
            r++;
            player::seleccionar(P,r);
        }
    }   
}

bool player::colision(pieza &P){
    for(int i=0; i<5; i++){
        coordenadas c = P.posicion(i);
        if(c.x < 2 || c.x > 30) return true;

        if(c.y < 2 || c.y >26) return true;

        if(ju[c.y-1][c.x-1] == 'P' || ju[c.y-1][c.x-1] == 'B' || ju[c.y-1][c.x-1] == 'S' || ju[c.y-1][c.x-1] == 'L') return true;
    }
    return false;
}

int main(){

    player a;                 
    pieza S;
    int r=0;

    a.pasarmapa();
    a.seleccionar(S,r);
    

    while(true){
        gotoxy(0,25); a.dibujarmapaju();
        a.mover(S,r);

    }

    return 0;
}
